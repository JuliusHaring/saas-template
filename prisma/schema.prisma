generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [vector]
}

model User {
  id    String @id @unique
  email String

  subscriptionId String?       @unique
  Subscription   Subscription?
  usageId        String?       @unique
  Usage          Usage?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  ChatBot   ChatBot[]
}

enum SubscriptionTier {
  BASIC
  PRO
  ENTERPRISE
}

model Subscription {
  userId         String           @unique
  subscriptionId String           @id @unique
  customerId     String
  tier           SubscriptionTier
  createdAt      DateTime         @default(now())
  expiresAt      DateTime?
  User           User             @relation(fields: [userId], references: [id], onDelete: Cascade) // Cascade here
}

model Usage {
  userId       String   @id @unique
  chatMessages Int      @default(0)
  fileCount    Int      @default(0)
  lastResetAt  DateTime @default(now())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  User         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum IngestionStatus {
  READY
  RUNNING
  ABORTED
  LIMITED
}

model ChatBot {
  userId String
  User   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  id             String         @id @default(dbgenerated("gen_random_uuid()"))
  allowedDomains String[]       @default([])
  GDriveSource   GDriveSource?
  WebsiteSource  WebsiteSource?
  Files          File[]
  Style          Style?

  instructions   String?
  initialMessage String
  name           String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  ingestionStatus IngestionStatus @default(READY)
}

model GDriveSource {
  id        String  @id @default(dbgenerated("gen_random_uuid()"))
  chatBotId String  @unique
  ChatBot   ChatBot @relation(fields: [chatBotId], references: [id], onDelete: Cascade)

  apiKey String
}

model WebsiteSource {
  id        String  @id @default(dbgenerated("gen_random_uuid()"))
  chatBotId String  @unique
  ChatBot   ChatBot @relation(fields: [chatBotId], references: [id], onDelete: Cascade)

  url            String
  url_exceptions String[]
}

model File {
  id        String  @id @default(dbgenerated("gen_random_uuid()"))
  chatBotId String
  ChatBot   ChatBot @relation(fields: [chatBotId], references: [id], onDelete: Cascade)

  name            String
  content         String
  vector          Unsupported("vector(1536)")?
  createdAt       DateTime                     @default(now())
  insertionSource String
}

model Style {
  id        String  @id @default(dbgenerated("gen_random_uuid()"))
  chatBotId String  @unique
  ChatBot   ChatBot @relation(fields: [chatBotId], references: [id], onDelete: Cascade)

  css String
}
