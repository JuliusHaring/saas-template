generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [vector]
}

model User {
  userId           String  @id @unique
  stripeCustomerId String?

  subscription Subscription? @relation(fields: [userId], references: [userId], map: "User_Subscription_fkey")
  usage        Usage?        @relation(fields: [userId], references: [userId], map: "User_Usage_fkey")

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  ChatBot   ChatBot[]
}

enum SubscriptionTier {
  BASIC
  PRO
  ENTERPRISE
}

model Subscription {
  userId    String           @id @unique
  tier      SubscriptionTier
  createdAt DateTime         @default(now())
  expiresAt DateTime?
  User      User?
}

model Usage {
  userId       String   @id @unique
  chatMessages Int      @default(0)
  fileCount    Int      @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  User         User?
}

model ChatBot {
  userId String

  User User @relation(fields: [userId], references: [userId], map: "ChatBot_User_fkey")

  assistantId          String                @id
  GDriveSourceOptions  GDriveSourceOptions?
  WebsiteSourceOptions WebsiteSourceOptions?
  Documents            Document[]
  Style                Style?

  instructions String?
  name         String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model GDriveSourceOptions {
  id          String  @id @default(dbgenerated("gen_random_uuid()"))
  assistantId String  @unique
  ChatBot     ChatBot @relation(fields: [assistantId], references: [assistantId])

  apiKey String
}

model WebsiteSourceOptions {
  id          String  @id @default(dbgenerated("gen_random_uuid()"))
  assistantId String  @unique
  ChatBot     ChatBot @relation(fields: [assistantId], references: [assistantId])

  url            String
  url_exceptions String[]
}

model Document {
  id          String  @id @default(dbgenerated("gen_random_uuid()"))
  assistantId String
  ChatBot     ChatBot @relation(fields: [assistantId], references: [assistantId])

  name      String
  content   String
  vector    Unsupported("vector(1536)")?
  createdAt DateTime                     @default(now())
}

model Style {
  id          String  @id @default(dbgenerated("gen_random_uuid()"))
  assistantId String  @unique
  ChatBot     ChatBot @relation(fields: [assistantId], references: [assistantId])

  css String
}
